"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = typo3extension;
const node_path_1 = require("node:path");
const vite_1 = require("vite");
const picocolors_1 = __importDefault(require("picocolors"));
const utils_js_1 = require("./utils.js");
function typo3extension(userConfig = {}) {
    const logger = (0, vite_1.createLogger)("info", { prefix: "[plugin-typo3-extension]" });
    let pluginConfig;
    let extension;
    let entrypoints;
    return {
        name: "vite-plugin-typo3-extension",
        apply: "build",
        config(config) {
            // Don't watch files in irrelevant/temporary TYPO3 directories
            // This prevents performance issues and avoids file system problems
            config.server ??= {};
            config.server.watch ??= {};
            config.server.watch.ignored ??= (0, utils_js_1.getDefaultIgnoreList)();
            try {
                pluginConfig = (0, utils_js_1.initializePluginConfig)(userConfig, config.root ?? process.cwd());
            }
            catch (err) {
                logger.error(picocolors_1.default.red(err.mesage), { timestamp: true });
                return;
            }
            // Set empty base path to enable relative paths in generated assets (e. g. CSS files)
            config.base ??= "";
            // Disable public dir since TYPO3 already has plenty of options to serve static files
            config.publicDir ??= false;
            // Enable source maps for CSS files in dev environment
            config.css ??= {};
            config.css.devSourcemap ??= true;
            // Setup build destination folder
            config.build ??= {};
            config.build.outDir ??= (0, node_path_1.join)(pluginConfig.composerContext.path, "Resources/Public/Vite/");
            extension = pluginConfig.composerContext;
            // Add path alias for extension
            config.resolve ??= {};
            config.resolve.alias = (0, utils_js_1.addAliases)(config.resolve.alias, [extension], pluginConfig.aliases);
            // Find all vite entrypoints in extension
            entrypoints = (0, utils_js_1.findEntrypointsInExtensions)([extension], pluginConfig.entrypointFile, pluginConfig.entrypointIgnorePatterns);
            if (!entrypoints.length) {
                logger.warn(picocolors_1.default.red("No entrypoints from TYPO3 extensions have been picked up. Make sure that you create at least one 'Configuration/ViteEntrypoints.json' file."), { timestamp: true });
            }
            // Setup build destination folder
            const lib = config.build.lib !== false ? config.build.lib : undefined;
            config.build.lib = {
                formats: ["es", "cjs"],
                ...lib,
                entry: (0, utils_js_1.addRollupInputs)(lib?.entry, entrypoints),
            };
        },
        configResolved() {
            if (pluginConfig && pluginConfig.debug) {
                (0, utils_js_1.outputDebugInformation)([extension], entrypoints, pluginConfig.composerContext, logger, pluginConfig.aliases);
            }
        },
    };
}
//# sourceMappingURL=typo3extension.js.map