import fs from "node:fs";
import { dirname, join, resolve } from "node:path";
import { defaultAllowedOrigins, } from "vite";
import { globSync } from "tinyglobby";
import colors from "picocolors";
export function initializePluginConfig(userConfig, root) {
    const target = userConfig.target ?? "project";
    const composerContext = determineComposerContext(target, collectComposerChain(root));
    if (!composerContext) {
        const message = target === "project"
            ? 'No composer project could be found in parent directories. Make sure to set "type": "project" in your root composer.json.'
            : "No extension composer file could be found in parent directories. Make sure that your extension has a valid composer file.";
        throw new Error(message);
    }
    return {
        target,
        entrypointFile: "Configuration/ViteEntrypoints.json",
        entrypointIgnorePatterns: ["**/node_modules/**", "**/.git/**"],
        debug: false,
        composerContext,
        aliases: true,
        ...userConfig,
    };
}
export function collectComposerChain(path) {
    let contexts = [];
    // Check if composer file exists in current dir
    const composerFile = join(path, "composer.json");
    if (fs.existsSync(composerFile)) {
        const composerJson = readJsonFile(composerFile);
        const composerContext = createComposerContext(composerJson, path);
        contexts.push(composerContext);
        // No need to check further if we already found a project root
        if (composerContext.type === "project") {
            return contexts;
        }
    }
    // Check parent dirs recursively
    const parent = dirname(path);
    if (parent && parent !== path) {
        contexts = contexts.concat(collectComposerChain(parent));
    }
    return contexts;
}
export function createComposerContext(json, path) {
    switch (json.type) {
        case "project":
            return {
                type: "project",
                path,
                vendorDir: json.config?.["vendor-dir"] ?? "vendor",
                webDir: json.extra?.["typo3/cms"]?.["web-dir"] ?? "public",
            };
        case "typo3-cms-extension":
            return {
                type: "typo3-cms-extension",
                path,
                extensionKey: json.extra?.["typo3/cms"]?.["extension-key"] ?? "",
            };
        default:
            return {
                type: json.type ?? "library",
                path,
            };
    }
}
export function determineComposerContext(target, chain) {
    const type = target === "extension" ? "typo3-cms-extension" : target;
    return chain.find((context) => context.type === type);
}
export function findEntrypointsInExtensions(extensions, entrypointFile, entrypointIgnorePatterns) {
    let entrypoints = [];
    extensions.forEach((extension) => {
        const file = join(extension.path, entrypointFile);
        if (!fs.existsSync(file)) {
            return;
        }
        const patterns = readJsonFile(file).map((pattern) => resolve(dirname(file), pattern));
        entrypoints = entrypoints.concat(globSync(patterns, {
            cwd: dirname(file),
            ignore: entrypointIgnorePatterns,
            absolute: true,
            expandDirectories: false,
        }));
    });
    return entrypoints;
}
export function determineAvailableTypo3Extensions(composerContext) {
    const composerInstalled = join(composerContext.path, composerContext.vendorDir, "composer/installed.json");
    if (!fs.existsSync(composerInstalled)) {
        throw new Error(`Unable to read composer package information from "${composerInstalled}". Try executing "composer install".`);
    }
    const installedPackages = readJsonFile(composerInstalled);
    if (!installedPackages.packages) {
        throw new Error(`Invalid composer state in  "${composerInstalled}". Try executing "composer install".`);
    }
    const installedExtensions = installedPackages.packages
        .filter((extension) => extension?.type === "typo3-cms-extension")
        .map((extension) => createComposerContext(extension, resolve(dirname(composerInstalled), extension["install-path"])));
    return installedExtensions;
}
export function outputDebugInformation(availableExtensions, entrypoints, composerContext, logger, aliasConfig = true) {
    if (availableExtensions.length) {
        const extensionList = availableExtensions.map((extension) => extension.extensionKey);
        const aliasList = createAliases(availableExtensions, aliasConfig).map((alias) => alias.find);
        logger.info(`The following TYPO3 extensions have been recognized: ${colors.green(extensionList.join(", "))}`, { timestamp: true });
        logger.info(`The following aliases have been defined: ${colors.green(aliasList.join(", "))}`, { timestamp: true });
    }
    if (entrypoints.length) {
        const entrypointList = entrypoints.map((path) => path.replace(composerContext.path + "/", ""));
        logger.info(`The following entrypoints will be served:\n` +
            colors.green("➜ " + entrypointList.join("\n➜ ")), { timestamp: true });
    }
}
export function addRollupInputs(input, additionalInputs) {
    // Prevent empty input, which would trigger index.html fallback by vite
    input ??= [];
    if (typeof input === "string") {
        input = [input].concat(additionalInputs);
    }
    else if (Array.isArray(input)) {
        input = input.concat(additionalInputs);
    }
    else {
        input = { ...input, ...additionalInputs };
    }
    return input;
}
export function addAliases(alias, extensions, config = true) {
    alias ??= [];
    if (!Array.isArray(alias)) {
        alias = Object.entries(alias).map((entry) => ({
            find: entry[0],
            replacement: entry[1],
        }));
    }
    return alias.concat(createAliases(extensions, config));
}
export function createAliases(extensions, config) {
    if (config === false) {
        return [];
    }
    return extensions.reduce((aliases, extension) => {
        const replacement = extension.path.endsWith("/")
            ? extension.path
            : extension.path + "/";
        if (config === "@" || config === true) {
            aliases.push({ find: "@" + extension.extensionKey, replacement });
        }
        if (config === "EXT" || config === true) {
            aliases.push({
                find: "EXT:" + extension.extensionKey,
                replacement,
            });
        }
        return aliases;
    }, []);
}
export function readJsonFile(file) {
    return JSON.parse(fs.readFileSync(file, "utf-8"));
}
export function getDefaultIgnoreList() {
    return [
        "**/.ddev/**",
        "**/var/cache/**",
        "**/var/charset/**",
        "**/var/labels/**",
        "**/var/lock/**",
        "**/var/log/**",
        "**/var/session/**",
        "**/var/tests/**",
        "**/var/transient/**",
        "**/fileadmin/**",
        "**/typo3temp/**",
        "**/_processed_/**",
    ];
}
export function getDefaultAllowedOrigins() {
    return [defaultAllowedOrigins, /^https?:\/\/.*\.ddev\.site(:\d+)?$/];
}
//# sourceMappingURL=utils.js.map